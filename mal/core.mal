(def! _fn? (fn* [x]
  (if (fn? x)
    (if (get (meta x) "ismacro")
      false
      true)
    false)))

(def! macro? (fn* [x]
  (if (fn? x)
    (if (get (meta x) "ismacro")
      true
      false)
    false)))

; Some hoisted functions are not required to be defined by the outer mal.
; This wrapper ensures that such an absence only causes a problem if the
; optional function is actually called.
(defmacro! wrapfn (fn* [f]
  `(fn* [& args] (apply ~f args))))

(def! core_ns
  [["=" =]
   ["throw" throw]
   ["nil?" nil?]
   ["true?" true?]
   ["false?" false?]
   ["number?" (wrapfn number?)]
   ["string?" (wrapfn string?)]
   ["symbol" symbol]
   ["symbol?" symbol?]
   ["keyword" keyword]
   ["keyword?" keyword?]
   ["fn?" _fn?]
   ["macro?" macro?]

   ["pr-str" pr-str]
   ["str" str]
   ["prn" prn]
   ["println" println]
   ["readline" readline]
   ["read-string" read-string]
   ["slurp" slurp]
   ["<" <]
   ["<=" <=]
   [">" >]
   [">=" >=]
   ["+" +]
   ["-" -]
   ["*" *]
   ["/" /]
   ["time-ms" (wrapfn time-ms)]

   ["list" list]
   ["list?" list?]
   ["vector" vector]
   ["vector?" vector?]
   ["hash-map" hash-map]
   ["map?" map?]
   ["assoc" assoc]
   ["dissoc" dissoc]
   ["get" get]
   ["contains?" contains?]
   ["keys" keys]
   ["vals" vals]

   ["sequential?" sequential?]
   ["cons" cons]
   ["concat" concat]
   ["nth" nth]
   ["first" first]
   ["rest" rest]
   ["empty?" empty?]
   ["count" count]
   ["apply" apply]
   ["map" map]

   ["conj" (wrapfn conj)]
   ["seq" (wrapfn seq)]

   ["with-meta" with-meta]
   ["meta" meta]
   ["atom" atom]
   ["atom?" atom?]
   ["deref" deref]
   ["reset!" reset!]
   ["swap!" swap!]])
